import random
import datetime

a = [[[17, 29], [47, 391], [1187, 1217]], [[164, 578], [1427, 390]], [[1002, 1045]], [[0, 427], [1439, 426]], [], [[206, 415]], [[102, 401]], [[61, 407]], [[65, 464], [464, 574]], [[115, 398], [1411, 459]], [[1373, 461]], [], [[183, 457]], [[209, 462]], [[338, 603], [1353, 467]], [[1385, 434]], [], [[163, 462], [1421, 452]], [], [[130, 427]], [[133, 437]], [[225, 471], [698, 963]], [[166, 565], [1304, 437]], [], [[217, 531], [531, 549], [840, 992]], [[199, 410], [410, 436]], [[102, 410]], [[219, 442]], [[163, 444]], [[89, 512]], [[193, 453]], [[360, 816]], [[209, 450]], [[211, 435]], [[169, 443]], [[64, 594]], [[64, 436], [1288, 296]], [[974, 12]], [[12, 483], [1224, 263]], [[1436, 454]], [[862, 1074]], [[74, 387]], [[230, 442]], [[73, 676]], [[117, 437]], [[4, 442]], [[292, 433]], [[146, 441], [1295, 245]], [[332, 435]], [[307, 440]], [[193, 391], [391, 578], [1439, 627]], [], [[582, 780]], [[180, 490], [490, 499]], [[190, 441]], [[105, 435], [519, 734]], [[166, 435]], [[191, 479]], [[81, 439]], [[101, 440]], [[118, 511]], [[120, 446]], [[261, 453]], [[61, 405]], [[102, 450]], [[137, 576]], [[129, 449], [1399, 403]], [[430, 451]], [[245, 468]], [[123, 435]], [[90, 395]], [[80, 380], [1293, 430]], [], [[160, 430]], [[183, 402]], [[123, 445]], [[327, 450], [855, 1036]], [[137, 298], [1376, 456]], [[1288, 128]], [[128, 528], [1375, 251]], [[395, 450], [450, 573]], [[127, 442]], [[340, 434], [1414, 437]], [], [[209, 442]], [[206, 483]], [[28, 442], [1392, 310]], [], [[18, 380], [394, 406]], [[147, 445]], [[109, 439]], [[215, 446], [1356, 597]], [[1382, 417]], [[475, 563], [1387, 443]], [], [[232, 448]], [[169, 475], [475, 528]], [[101, 435]], [[116, 441]], [[59, 461], [1437, 557]], [], [[241, 447]], [[166, 440]], [[151, 594]], [[109, 473]], [[44, 561]], [[32, 460]], [[5, 419], [847, 1060]], [[245, 434], [1367, 285]], [[1280, 276]], [[409, 450], [1392, 264]], [[1237, 497]], [[1420, 346]], [[346, 556], [1342, 426]], [], [[34, 471], [1359, 437]], [[1345, 431]], [], [[163, 456], [1399, 442]], [], [[10, 448], [1371, 445]], [[1398, 446]], [[1419, 190]], [[224, 445]], [[18, 439]], [[235, 613], [1251, 455]], [[1423, 462]], [[1434, 435]], [[886, 1086]], [[204, 630]], [[22, 457], [1318, 384]], [], [[11, 436], [1318, 184]], [[336, 598]], [[162, 528], [1347, 562]], [], [[37, 544]], [[0, 515]], [[36, 590]], [[179, 621]], [[22, 581]], [[102, 461], [1437, 457]], [[845, 1069]], [[138, 540]], [[95, 501]], [[78, 468], [1341, 446]], [], [[69, 491], [1348, 558]], [], [[157, 558]], [[2, 459]], [[23, 494]], [[90, 454]], [[131, 449]], [[156, 447], [1428, 483]], [], [[59, 566], [1310, 452]], [], [[120, 639]], [[67, 460]], [[120, 448]], [[176, 466]], [[96, 583]], [[112, 484]], [[170, 511], [1334, 455]], [], [[61, 533]], [[149, 655]], [[35, 456], [1155, 1160]], [[101, 462]], [[197, 393]], [[217, 462]], [[286, 569]], [[11, 492]], [[147, 589]], [[196, 453]], [[125, 487], [1395, 597]], [], [[265, 440]], [[210, 459]], [[172, 452]], [[130, 453]], [[221, 726]], [[21, 431], [1378, 453]], [], [[189, 452]], [[237, 448], [1353, 562]], [], [[109, 551]], [[124, 462], [483, 724]], [[56, 490]], [[45, 613], [1359, 595]], [[1328, 588]], [], [[29, 550], [1425, 577]], [], [[34, 582], [1423, 629]], [], [[49, 566]], [[212, 654]], [[268, 572]], [[148, 641]], [[163, 638]], [[147, 411]], [[275, 589]], [[132, 437]], [[49, 701]], [[209, 472]], [[215, 435]], [[212, 566]], [[106, 736]], [[193, 629]], [[397, 797]], [[127, 702]], [[25, 385]], [[69, 678]], [[386, 673]], [[122, 681]], [[108, 396], [481, 721], [1274, 191]], [[409, 454]], [[144, 741]], [[248, 697]], [[96, 713], [1370, 626]], [], [[370, 726], [1285, 429]], [[429, 504]], [[101, 550], [1429, 458]], [], [[329, 734]], [[124, 481]], [[237, 564]], [[1, 421]], [[40, 662]], [[84, 646]], [[255, 617]], [[224, 683]], [[159, 647]], [[40, 463]], [[201, 563]], [[264, 698]], [[17, 451]], [[90, 459]], [[36, 472], [518, 547]], [[26, 450]], [[303, 508], [508, 554]], [[84, 555]], [[296, 734]], [[60, 537]], [[410, 632]], [[69, 458]], [[103, 625]], [[88, 636]], [[196, 741]], [[32, 404], [529, 708], [907, 1191]], [[90, 366]], [[120, 642]], [[73, 711]], [[110, 401]], [[339, 699]], [[182, 753]], [[76, 363]], [[112, 363], [363, 368]], [[213, 463]], [[216, 634]], [[117, 368]], [[212, 650]], [[118, 573]], [[244, 769]], [[104, 758]], [[178, 622]], [[237, 742]], [[220, 608], [655, 795]], [[180, 690]], [[288, 732]], [[226, 648]], [[299, 629]], [[282, 711]], [[90, 517], [517, 667]], [[173, 640]], [[600, 673], [1297, 385]], [], [[159, 701]], [[80, 380]], [[138, 627], [627, 719]], [[224, 733]], [[171, 690]], [], [[245, 670]], [[154, 542]], [[208, 547]], [[29, 367]], [], [], [], [], [[39, 505], [1407, 371]], [], [[180, 684], [1417, 661]], [], [[50, 494], [916, 1207]], [[132, 615]], [[59, 552]], [[91, 569]], [[161, 656]], [[232, 554], [554, 689]], [[186, 585]], [[173, 613]], [[90, 373]], [[137, 587], [620, 797]], [[107, 630]], [[220, 667]], [[241, 666]], [[114, 626]], [[239, 743]], [[28, 675]], [[147, 606]], [[151, 567]], [[140, 600]], [[152, 601]], [[219, 540]], [[406, 834]], [[193, 673]], [[178, 636]], [[77, 591]], [[61, 596]], [[163, 458], [458, 616]], [[130, 628]], [[166, 612]], [[129, 614]], [[124, 581]], [[87, 601]], [[147, 586]], [[8, 402], [1414, 424]], [[1389, 446]], [], [[67, 455]], [[109, 523]], [[70, 521], [521, 538], [1346, 376]], [], [[159, 502], [742, 1120]]]
# time : 0 min to 1439 mins (1439 = 24*60 -1 )
bordery = 0 # issue with border y. 
# if you change it to non-zero, the window height is not well-shaped to include all elements in a
a = a[:]
s = len(a)
w, h = 800, s*3+bordery

def setup():
    global a,w,h
    global min_sleep, max_sleep, fromC, toC # used to color the bars based on total sleep that day
    
    size(w,h)
    background(255)
    noStroke()
    
    min_sleep = min((total_sleep(i,a) for i in range(len(a))))
    max_sleep = max((total_sleep(i,a) for i in range(len(a))))
    fromC = color(254,150,200)
    toC = color(341, 80, 89)
    
def total_sleep(i, a):
    # a is list of days, i is index of a day in a.
    # a[i] contains a list of tuples : (start time, end time)
    sum = 0
    for st,en in a[i]:
        if st>en:
            sum += 1449-st
        else:
            sum += en-st
    
    if i != 0 and len(a[i-1])!=0:
        if a[i-1][-1][0]>a[i-1][-1][1]:
            sum += a[i-1][-1][1]
            
    return sum

def ease(x):
    return 16 * x * x * x * x * x if x < 0.5 else 1 - pow(-2 * x + 2, 5) / 2;


def draw():
    
    translate(0,-h/s)
    with pushMatrix():
        
        for i,day_ in enumerate(a):
            # i goes from 0 to s-1
            translate(0,h/s)
            
            if len(day_) == 0:
                pass
        
            else:
                for (st,en) in day_:                   
                    
                    inter_sleep = float (total_sleep(i,a)-min_sleep)/(max_sleep-min_sleep)
                    inter_sleep = ease(inter_sleep)
                    print(inter_sleep)
                    assert (0 <= (total_sleep(i,a)-min_sleep)/(max_sleep-min_sleep) <= 1)

                    intermediateC = lerpColor(fromC,toC, inter_sleep)
                    fill(intermediateC)
                
                    # print(st*width/(24*60-1),en*width/(24*60-1))

                    if st-en > 0:
                        rect(st*width/(24*60-1),0,(1449-st)*width/(24*60-1), h/s)
                        translate(0,h/s)
                        rect(0,0,(en-0)*width/(24*60-1),h/s)
                        translate(0,-h/s)
                        print(st,en,"fixed bad data")
                    else:
                        rect(st*width/(24*60-1), 0, (en-st)*width/(24*60-1), h/s)
            d = datetime.datetime(2018, 6, 23) + datetime.timedelta(i)
            dn = datetime.datetime.strftime(d, "%d %b %Y")
            if dn[:2]=="01":
                fill(64, 78, 77)
                textSize(12)
                
                text(dn,5,h/(2*s))
            print("")

    with pushMatrix():
        for i in range(24):
            noFill()
            rect(0, 0, width/24.0, bordery)
            
            if i%6==0:
                stroke(200,200,200,100)
                line(0,0,0,height)
            
            textSize(12)
            fill(0)
            t = datetime.datetime.strptime(str(i),"%H")
            t = datetime.datetime.strftime(t,"%I %p")
            
            with pushMatrix():
                rotate(PI/2)
                translate(15,0)
                text(t,0,bordery)
                
            translate(width/24.0,0)
    translate(0,bordery)
    
    save("vis.png")
    noLoop()
    
